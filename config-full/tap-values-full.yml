#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

---
#@ def config():
profile: full
ceip_policy_disclosed: true
buildservice:
  kp_default_repository: #@ "{}/{}".format(data.values.tap.registry.host, data.values.tap.registry.repositories.buildService)
  kp_default_repository_username: #@ data.values.tap.credentials.registry.username
  kp_default_repository_password: #@ data.values.tap.credentials.registry.password
  tanzunet_username: #@ data.values.tap.credentials.tanzuNet.username
  tanzunet_password: #@ data.values.tap.credentials.tanzuNet.password
  descriptor_name: "full"
  enable_automatic_dependency_updates: true

supply_chain: testing_scanning

ootb_supply_chain_testing_scanning:
  registry:
    server: #@ data.values.tap.registry.host
    repository: #@ data.values.tap.registry.repositories.ootbSupplyChain
  gitops:
    ssh_secret: git-ssh
  scanning:
    image:
      template: snyk-private-image-scan-template
      policy: scan-policy

learningcenter:
  ingressDomain: #@ data.values.tap.domains.learningCenter
  ingressSecret:
    secretName: tls
    server:
      service_type: ClusterIP

tap_gui:
  service_type: ClusterIP
  ingressEnabled: "true"
  ingressDomain: #@ data.values.tap.domains.main
  tls:
    namespace: tanzu-system-ingress
    secretName: tls
  app_config:
    customize:
      custom_logo: "PHN2ZyBoZWlnaHQ9IjkzOCIgd2lkdGg9IjI1MDAiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgdmlld0JveD0iMC45MiAwLjYyMSAxMTAuODg5IDQxLjM0OCI+PGcgZmlsbD0ibm9uZSIgZmlsbC1ydWxlPSJldmVub2RkIj48cGF0aCBkPSJNOS4xMjUgNDEuOTY5aDk0LjQ2NWM0LjU4NiAwIDguMjE5LTMuNjMzIDguMjE5LTguMjE5VjguODRjMC00LjQ5Ni0zLjYzMy04LjIxOS04LjIyLTguMjE5SDkuMTQyQzQuNTU1LjYyMS45MiA0LjM0NC45MiA4Ljg0djI0LjkxYzAgNC41ODYgMy42MzQgOC4yMTkgOC4yMiA4LjIxOSIgZmlsbD0iIzIxNTFhOCIgZmlsbC1ydWxlPSJub256ZXJvIi8+PHBhdGggZD0iTTEwMy41OSAzNi43NzdjMS42NDQgMCAzLjAzMS0xLjMgMy4wMzEtMy4wMjdWOC44NGMwLTEuNjQ1LTEuNDY1LTMuMTEzLTMuMTEtMy4xMTNIOS4xNDJBMy4wNTQgMy4wNTQgMCAwIDAgNi4wMiA4Ljg0bC4wMDcgMjQuOTFjMCAxLjY0IDEuNDcgMy4wMjcgMy4xMTQgMy4wMjd6IiBmaWxsPSIjZmZmIi8+PHBhdGggZD0iTTEwMS4yMDcgMTkuOTI2aC01LjMyNGwxLjE5NS0yLjM5aDUuMzI0bDEuMTkyLTIuMjlIOTIuNzYybC02LjE5MiAxMi4yNWgxMC44MjhsMS4xMDItMi4yMDNoLTUuMzI0bDEuNjA1LTMuMTY4aDUuMzI0bDEuMTAyLTIuMnptLTE1LjY5NSA3LjU3bC0xLjY1My02Ljg4MyA3Ljg5NS01LjM2N0g4Ni4wMmwtNi41MiA0LjQ1IDIuMjUtNC40NWgtNS41MDRsLTYuMTk1IDEyLjI1aDUuNTA0bDIuMDYyLTQuMDg2IDEuNjU2LS42ODcuOTY1IDQuNzczem0tMjMuNTQzLTEuNTYyYy0uODcxIDAtMS4zMjgtLjE4LTEuMzI4LS42NDEgMC0uMzY3LjIzLS44NzEuNTA0LTEuNDIybC4xNC0uMjc3aC01LjY0OGwtLjUwNCAxLjAxMWMtLjE4NC4zNjQtLjMyLjczLS4zMiAxLjE0OSAwIDEuMjM4IDEuMDA3IDIuMiA2LjY1NiAyLjIgNS4wOSAwIDYuNDY4LS4yNzQgNy4yOTMtMS44OGwuOTE4LTEuNzg5Yy4zNy0uNjkxLjY0NC0xLjQyMi42NDQtMi4wNjYgMC0uNTk4LS4yMy0xLjI4NS0xLjY1Mi0xLjY1M2wtNC4yNjYtMS4xNDRjLS41MDgtLjEzNy0uNjkxLS4zMjQtLjY5MS0uNTU1IDAtLjIyNi4wOTQtLjQxLjE4My0uNTk0bC4xODQtLjM2N2MuNDE0LS44MjguNzgxLTEuMDExIDEuNzktMS4wMTEuOTY0IDAgMS4zMzUuMjMgMS4zMzUuNjkgMCAuNDE1LS4yMy45MTktLjQ2NSAxLjM3NmwtLjA5LjE4NGg1LjU1MWwuNDYxLS45MThjLjE4LS4zNjguMzItLjc4Mi4zMi0xLjE0OSAwLTEuMjM4LS42ODctMi4yMDMtNi4zMzItMi4yMDMtNS4wOTcgMC02LjY1Mi4yNzctNy40OCAxLjg4M2wtMS4xOTUgMi4zNGEyLjQ1MiAyLjQ1MiAwIDAgMC0uMjc0IDEuMTAxYzAgLjU5OC4zNjcgMS4yODUgMS41NjMgMS42MDZsNC40OTIgMS4yNDJjLjQ2LjEzNy41MDguMzYzLjUwOC41NDcgMCAuMjMtLjEzNy41OTctLjI3NC44N2wtLjIzNC40NjJjLS40MS44MjgtLjc3OCAxLjAwOC0xLjc5IDEuMDA4ek00OS4xNjggMTUuMjQ2aC01LjE0bC02LjE5NiAxMi4yNWg0LjU5bDIuNjY0LTUuMjc3Yy4yMjctLjQ2MS41MDQtMS4zMjguNTA0LTEuMzI4bC45NiA2LjYwNWg1LjI3OGw2LjItMTIuMjVoLTQuNTlsLTIuNzU4IDUuNTk4Yy0uMjI3LjQ1Ny0uNTA0IDEuMjgxLS41MDQgMS4yODF6bS05LjgyIDQuNjhoLTUuMzI1bDEuMTkyLTIuMzloNS4zMjhsMS4xOTEtMi4yOUgzMC45MDZsLTYuMTk1IDEyLjI1aDEwLjgyOGwxLjEwMi0yLjIwM2gtNS4zMjVsMS42MDYtMy4xNjhoNS4zMjRsMS4xMDItMi4yek0xNy4zMiAyMS43NThoMi4wNjdjLjY0NCAwIC45Ni0uMjc0IDEuMTQ0LS42NGwxLjUxNi0yLjkzOGMuMDk0LS4xOC4xMzctLjMyLjEzNy0uNDU3IDAtLjIzLS4xODQtLjQxNC0uNTk0LS40MTRoLTIuMDJ6bS0yLjE5OS02LjUxMkgyNS43MmMxLjMzMiAwIDIuMDY2LjU1IDIuMDY2IDEuMzc1IDAgLjQ1Ny0uMTg3LjkxNC0uMzY3IDEuMjg1bC0yLjExMyA0LjE3NmMtLjQ1Ny45NjUtMS4yODUgMS43NDItMi45OCAxLjc0MmgtNi4wMTJsLTEuODgzIDMuNjcySDguOTIybDYuMi0xMi4yNXoiIGZpbGw9IiMyMzFmMjAiIGZpbGwtcnVsZT0ibm9uemVybyIvPjwvZz48L3N2Zz4="
      custom_name: "Penske Corporation Inc"
    proxy:
      /metadata-store:
        target: https://metadata-store-app.metadata-store:8443/api/v1
        changeOrigin: true
        secure: false
        headers:
          Authorization: #@ data.values.tap.credentials.metadataStore.accessToken
          X-Custom-Source: project-star
    app:
      baseUrl: #@ "https://{}".format(data.values.tap.domains.tapGui)
    integrations:
      #@ if "github" in data.values.tap.credentials and "token" in data.values.tap.credentials.github:
      github:
      - host: github.com
        token: #@ data.values.tap.credentials.github.token
      #@ end
    catalog:
      locations:
      #@ for catalog in data.values.tap.catalogs:
      - type: url
        target: #@ catalog
      #@ end
    supplyChain:
      enablePlugin: true
    backend:
      baseUrl: #@ "https://{}".format(data.values.tap.domains.tapGui)
      cors:
        origin: #@ "https://{}".format(data.values.tap.domains.tapGui)
      #@ if "backstage" in data.values.tap.credentials and "database" in data.values.tap.credentials.backstage:
      backend:
        database:
          client: #@ data.values.tap.credentials.backstage.database.client
          connection:
            host: #@ data.values.tap.credentials.backstage.database.host
            port: #@ data.values.tap.credentials.backstage.database.port
            user: #@ data.values.tap.credentials.backstage.database.username
            password: #@ data.values.tap.credentials.backstage.database.password
            ssl: {rejectUnauthorized: true}
      #@ end
    #@ if "github" in data.values.tap.credentials and "clientId" in data.values.tap.credentials.github and "clientSecret" in data.values.tap.credentials.github:
    auth:
      environment: development
      providers:
        github:
          development:
            clientId: #@ data.values.tap.credentials.github.clientId
            clientSecret: #@ data.values.tap.credentials.github.clientSecret
    #@ end
metadata_store:
  ns_for_export_app_cert: "*"
  ingress_enabled: "true"
  ingress_domain: #@ data.values.tap.domains.main
  ingressSecret:
    secretName: tls

grype:
  namespace: #@ data.values.tap.devNamespace
  targetImagePullSecret: "registry-credentials"
  metadataStore:
    url: "https://metadata-store.tanzu.y-compiles.com"

scanning:
  metadataStore:
    url: ""
    ns_for_export_app_cert: "*"


contour:
  envoy:
    service:
      type: LoadBalancer

cnrs:
  domain_name: #@ data.values.tap.domains.knative
  default_tls_secret: tanzu-system-ingress/tls
  domain_template: "{{.Name}}-{{.Namespace}}.{{.Domain}}"

appliveview:
  ingressDomain: #@ data.values.tap.domains.main
  ingressEnabled: false
  tls:
    namespace: tanzu-system-ingress
    secretName: tls

appliveview_connector:
  backend:
    #!host: #@ data.values.tap.domains.appliveview.host
    #!    port: #@ data.values.tap.domains.appliveview.port
    sslDisabled: "true"

#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: tap-values
  namespace: #@ data.values.tap.namespace
type: Opaque
stringData:
  values.yml: #@ yaml.encode(config())
---
apiVersion: packaging.carvel.dev/v1alpha1
kind: PackageInstall
metadata:
  name: tap
  namespace: #@ data.values.tap.namespace
  annotations:
    kapp.k14s.io/change-group: tap
    kapp.k14s.io/change-rule: "upsert after upserting tap-install/rbac"
    kapp.k14s.io/change-rule.repo: "upsert after upserting tap-install/tap-repo"
    ext.packaging.carvel.dev/ytt-paths-from-secret-name.0: "custom-labels"
spec:
  packageRef:
    refName: tap.tanzu.vmware.com
    versionSelection:
      constraints: #@ str(data.values.tap.version)
      prereleases: {}
  serviceAccountName: tap-default-sa
  values:
  - secretRef:
      name: tap-values
---
apiVersion: v1
kind: Secret
metadata:
  name: custom-labels
  namespace: #@ data.values.tap.namespace
stringData:
  add-custom-labels.yml: |
    #@ load("@ytt:overlay", "overlay")

    #@overlay/match by=overlay.subset({"kind":"PackageInstall"}),expects="1+"
    ---
    metadata:
      #@overlay/match missing_ok=True
      annotations:
        #@overlay/match missing_ok=True
        ext.packaging.carvel.dev/ytt-paths-from-secret-name.0: my-custom-labels

    ---
    apiVersion: v1
    kind: Secret
    metadata:
      name: my-custom-labels
    stringData:
      add-my-custom-labels.yml: |
        #@ load("@ytt:overlay", "overlay")

        #@overlay/match by=overlay.subset({"kind": "Namespace"}),expects="0+"
        ---
        metadata:
          #@overlay/match missing_ok=True
          labels:
            #@overlay/match missing_ok=True
            istio-injection: "false"
            #@overlay/match missing_ok=True
            tmc-policy: "false"